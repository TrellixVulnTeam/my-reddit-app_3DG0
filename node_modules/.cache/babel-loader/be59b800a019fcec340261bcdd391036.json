{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emily\\\\Documents\\\\web-dev\\\\projects\\\\reddit\\\\my-redit-app\\\\src\\\\components\\\\post\\\\social\\\\comment\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getComments as getCommentsApi, createComment as createCommentApi, deleteComment as deleteCommentApi, updateComment as updateCommentApi } from './api';\nimport Comment from \"./Comment\";\nimport CommentForm from \"./CommentForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    currentUserId\n  } = _ref;\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n  console.log('backendComments', backendComments);\n\n  const getReplies = commentId => {\n    return backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  };\n\n  const addComment = (text, parentId) => {\n    console.log('addComment', text, parentId);\n    createCommentApi(text, parentId).then(comment => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n\n  const deleteComment = commentId => {\n    if (window.confirm('Are you sure you want to remove the comment?')) {\n      deleteCommentApi(commentId).then(() => {\n        const updatedBackendComments = backendComments.filter(backendComment => backendComment.id !== commentId);\n        setBackendComments(updatedBackendComments);\n      });\n    }\n  };\n\n  const updateComment = (text, commentId) => {\n    updateCommentApi(text, comment.id).then(() => {\n      const updatedBackendComments = backendComments.map(backendComment => {\n        if (backendComment.is === commentId) {\n          return { ...backendComment,\n            body: text\n          };\n        }\n\n        return backendComment;\n      });\n      setBackendComments(updatedBackendComments);\n    });\n  };\n\n  useEffect(() => {\n    getCommentsApi().then(data => {\n      setBackendComments(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"Write a Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"write\",\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        currentUserId: currentUserId,\n        deleteComment: deleteComment,\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        updateComment: updateComment\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Comments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useEffect","useState","getComments","getCommentsApi","createComment","createCommentApi","deleteComment","deleteCommentApi","updateComment","updateCommentApi","Comment","CommentForm","Comments","currentUserId","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","console","log","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","then","comment","window","confirm","updatedBackendComments","id","map","is","body","data","rootComment"],"sources":["C:/Users/emily/Documents/web-dev/projects/reddit/my-redit-app/src/components/post/social/comment/Comments.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport {getComments as getCommentsApi, createComment as createCommentApi, deleteComment as deleteCommentApi, updateComment as updateCommentApi} from './api';\r\nimport Comment from \"./Comment\";\r\nimport CommentForm from \"./CommentForm\";\r\n\r\n\r\nconst Comments = ({currentUserId}) => {\r\n    const [backendComments, setBackendComments] = useState([]);\r\n    const [activeComment, setActiveComment] = useState(null)\r\n    const rootComments = backendComments.filter(\r\n        (backendComment) => backendComment.parentId === null )\r\n    console.log('backendComments', backendComments);\r\n\r\nconst getReplies = commentId => {\r\n    return backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a,b) =>  new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\r\n}\r\nconst addComment = (text, parentId) => {\r\n    console.log('addComment', text, parentId);\r\n    createCommentApi(text, parentId).then(comment => {\r\n        setBackendComments([comment, ...backendComments])\r\n        setActiveComment(null)\r\n    })\r\n}\r\nconst deleteComment = (commentId) => {\r\n    if (window.confirm('Are you sure you want to remove the comment?')){\r\n        deleteCommentApi(commentId).then(() => {\r\n            const updatedBackendComments = backendComments.filter((backendComment) => backendComment.id !== commentId);\r\n    setBackendComments(updatedBackendComments)}\r\n)}}\r\nconst updateComment = (text, commentId) => {\r\nupdateCommentApi(text, comment.id). then(() => {\r\n    const updatedBackendComments = backendComments.map(backendComment => {\r\n        if (backendComment.is === commentId) {\r\n            return {...backendComment, body: text}\r\n        }\r\n        return backendComment;\r\n    });\r\n    setBackendComments(updatedBackendComments);\r\n})\r\n}\r\n    useEffect(() => {\r\n        getCommentsApi().then((data) => {\r\n            setBackendComments(data);\r\n\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"comments\">\r\n            <h3 className=\"comments-title\">Comments</h3>\r\n            <div className=\"comment-form-title\">Write a Comment</div>\r\n            <CommentForm submitLabel=\"write\" handleSubmit={addComment}/>\r\n            <div className=\"comments-container\">\r\n                {rootComments.map((rootComment) => (\r\n                \r\n                <Comment \r\n                    key={rootComment.id} \r\n                    comment={rootComment} \r\n                    replies={getReplies(rootComment.id)}\r\n                    currentUserId={currentUserId}\r\n                    deleteComment={deleteComment}\r\n                    activeComment={activeComment}\r\n                    setActiveComment={setActiveComment}\r\n                    addComment={addComment}\r\n                    updateComment={updateComment}\r\n                    />\r\n            \r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;"],"mappings":"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"},"metadata":{},"sourceType":"module"}