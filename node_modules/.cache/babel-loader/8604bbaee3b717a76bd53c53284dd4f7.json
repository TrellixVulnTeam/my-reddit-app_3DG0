{"ast":null,"code":"export function convertTime(unix, length) {\n  var postTime = new Date(unix * 1000);\n  var hours = postTime.getHours();\n  var minutes = postTime.getMinutes() < 10 ? '0' + postTime.getMinutes() : postTime.getMinutes();\n  var seconds = postTime.getSeconds() < 10 ? '0' + postTime.getSeconds() : postTime.getSeconds();\n  var date = postTime.getDate();\n  var date3 = postTime.getDate() < 10 ? '0' + postTime.getDate() : postTime.getDate();\n  let date2; // Addresses the issue of ordinal numerals in English dating system\n\n  function appendSuffix(date) {\n    if (date === 1 || date === 21 || date === 31) {\n      date2 = `${date}st`;\n    } else if (date === 2 || date === 22) {\n      date2 = `${date}nd`;\n    } else if (date === 3 || date === 23) {\n      date2 = `${date}rd`;\n    } else {\n      date2 = `${date}th`;\n    }\n  }\n\n  appendSuffix(date);\n  var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  var day = days[postTime.getDay()];\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var month = months[postTime.getMonth()];\n  var monthNum = postTime.getMonth() < 10 ? '0' + postTime.getMonth() : postTime.getMonth();\n  var year = postTime.getFullYear();\n  let time;\n\n  if (length === 'short') {\n    time = `${hours}:${minutes}:${seconds} | ${date3}/${monthNum}/${year}`;\n  } else {\n    time = `Posted at ${hours}:${minutes}:${seconds} on ${day}, ${date2} ${month} ${year}`;\n  }\n\n  return time;\n}","map":{"version":3,"names":["convertTime","unix","length","postTime","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","date","getDate","date3","date2","appendSuffix","days","day","getDay","months","month","getMonth","monthNum","year","getFullYear","time"],"sources":["C:/Users/emily/Documents/web-dev/projects/reddit/my-redit-app/src/components/post/timeConversion.js"],"sourcesContent":["export function convertTime(unix, length) {\r\n    var postTime = new Date(unix * 1000);\r\n    var hours = postTime.getHours();\r\n    var minutes = postTime.getMinutes() < 10 ? '0' + postTime.getMinutes() : postTime.getMinutes();\r\n    var seconds = postTime.getSeconds() < 10 ? '0' + postTime.getSeconds() : postTime.getSeconds();\r\n\r\n    var date = postTime.getDate();\r\n    var date3 = postTime.getDate() < 10 ? '0' + postTime.getDate() : postTime.getDate();\r\n\r\n    let date2;\r\n\r\n    // Addresses the issue of ordinal numerals in English dating system\r\n    function appendSuffix(date) {\r\n        if (date === 1 || date === 21 || date === 31) {\r\n            date2 = `${date}st`\r\n        } else if (date === 2 || date === 22) {\r\n            date2 = `${date}nd`\r\n        } else if (date === 3 || date === 23) {\r\n            date2 = `${date}rd`\r\n        } else {\r\n            date2 = `${date}th`\r\n        }\r\n    }\r\n\r\n    appendSuffix(date);\r\n\r\n    var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    var day = days[postTime.getDay()];\r\n\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    var month = months[postTime.getMonth()];\r\n    var monthNum = postTime.getMonth() < 10 ? '0' + postTime.getMonth() : postTime.getMonth();\r\n\r\n    var year = postTime.getFullYear();\r\n\r\n    let time\r\n\r\n    if (length === 'short') {\r\n        time = `${hours}:${minutes}:${seconds} | ${date3}/${monthNum}/${year}`\r\n    } else {\r\n        time = `Posted at ${hours}:${minutes}:${seconds} on ${day}, ${date2} ${month} ${year}`\r\n    }\r\n    return time;\r\n}"],"mappings":"AAAA,OAAO,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmC;EACtC,IAAIC,QAAQ,GAAG,IAAIC,IAAJ,CAASH,IAAI,GAAG,IAAhB,CAAf;EACA,IAAII,KAAK,GAAGF,QAAQ,CAACG,QAAT,EAAZ;EACA,IAAIC,OAAO,GAAGJ,QAAQ,CAACK,UAAT,KAAwB,EAAxB,GAA6B,MAAML,QAAQ,CAACK,UAAT,EAAnC,GAA2DL,QAAQ,CAACK,UAAT,EAAzE;EACA,IAAIC,OAAO,GAAGN,QAAQ,CAACO,UAAT,KAAwB,EAAxB,GAA6B,MAAMP,QAAQ,CAACO,UAAT,EAAnC,GAA2DP,QAAQ,CAACO,UAAT,EAAzE;EAEA,IAAIC,IAAI,GAAGR,QAAQ,CAACS,OAAT,EAAX;EACA,IAAIC,KAAK,GAAGV,QAAQ,CAACS,OAAT,KAAqB,EAArB,GAA0B,MAAMT,QAAQ,CAACS,OAAT,EAAhC,GAAqDT,QAAQ,CAACS,OAAT,EAAjE;EAEA,IAAIE,KAAJ,CATsC,CAWtC;;EACA,SAASC,YAAT,CAAsBJ,IAAtB,EAA4B;IACxB,IAAIA,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,EAAvB,IAA6BA,IAAI,KAAK,EAA1C,EAA8C;MAC1CG,KAAK,GAAI,GAAEH,IAAK,IAAhB;IACH,CAFD,MAEO,IAAIA,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,EAA3B,EAA+B;MAClCG,KAAK,GAAI,GAAEH,IAAK,IAAhB;IACH,CAFM,MAEA,IAAIA,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,EAA3B,EAA+B;MAClCG,KAAK,GAAI,GAAEH,IAAK,IAAhB;IACH,CAFM,MAEA;MACHG,KAAK,GAAI,GAAEH,IAAK,IAAhB;IACH;EACJ;;EAEDI,YAAY,CAACJ,IAAD,CAAZ;EAEA,IAAIK,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAX;EACA,IAAIC,GAAG,GAAGD,IAAI,CAACb,QAAQ,CAACe,MAAT,EAAD,CAAd;EAEA,IAAIC,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAAb;EACA,IAAIC,KAAK,GAAGD,MAAM,CAAChB,QAAQ,CAACkB,QAAT,EAAD,CAAlB;EACA,IAAIC,QAAQ,GAAGnB,QAAQ,CAACkB,QAAT,KAAsB,EAAtB,GAA2B,MAAMlB,QAAQ,CAACkB,QAAT,EAAjC,GAAuDlB,QAAQ,CAACkB,QAAT,EAAtE;EAEA,IAAIE,IAAI,GAAGpB,QAAQ,CAACqB,WAAT,EAAX;EAEA,IAAIC,IAAJ;;EAEA,IAAIvB,MAAM,KAAK,OAAf,EAAwB;IACpBuB,IAAI,GAAI,GAAEpB,KAAM,IAAGE,OAAQ,IAAGE,OAAQ,MAAKI,KAAM,IAAGS,QAAS,IAAGC,IAAK,EAArE;EACH,CAFD,MAEO;IACHE,IAAI,GAAI,aAAYpB,KAAM,IAAGE,OAAQ,IAAGE,OAAQ,OAAMQ,GAAI,KAAIH,KAAM,IAAGM,KAAM,IAAGG,IAAK,EAArF;EACH;;EACD,OAAOE,IAAP;AACH"},"metadata":{},"sourceType":"module"}